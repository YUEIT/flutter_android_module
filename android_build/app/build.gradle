apply plugin: 'com.android.library'

android {
    compileSdkVersion 30
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*'])
}

/**
 * copy flutter 编译产物到 assets目录下
 */
task copyBuildFlutterFile {
    doLast {
        print("copy from flutter .so flie into libs dir")
        delete('libs')
        copy {
            from('../../build/app/intermediates/merged_native_libs/release/out/lib')
                    .into('libs')
        }
        print("copy from flutter file into assets dir")
        delete('src/main/assets')
        copy {
            from('../../build/app/intermediates/flutter/release')
                    .into('src/main/assets')
        }
    }
}

/**
 * copy flutter生成的aar 到android/app/flutter_aar目录下
 */
task copyBuildAarFile {
    doLast {
        print("copy from flutter aar into android/flutter_lib/libs dir")
        copy {
            from('../../build/app/outputs/aar')
                    .into('../../android/flutter_lib/libs')
        }
    }
}

/**
 * 没什么用，统一打包
 */
task buildFlutter {
    doLast {
        print("build flutter successful！")
    }
}

afterEvaluate {
    tasks.getByName("bundleReleaseAar").dependsOn copyBuildFlutterFile
    copyBuildAarFile.dependsOn tasks.getByName("bundleReleaseAar")
    buildFlutter.dependsOn copyBuildAarFile
}
// build/app/intermediates/flutter/release
// build/app/intermediates/merged_native_libs/release/out/lib
