apply plugin: 'com.android.library'
apply plugin: 'com.kezong.fat-aar'

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*'])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
}

/**
 * copy flutter 编译产物到 assets目录下
 */
task copyBuildFlutterFile {
    doLast {
        print("copy from flutter file into assets dir")
        copy {
            from('../../build/flutter/intermediates/flutter/release')
                    .into('src/main/assets')
        }
    }
}

/**
 * copy flutter生成的aar 到android/app/flutter_aar目录下
 */
task copyBuildAarFile {
    doLast {
        print("copy from flutter aar into android/flutter_lib/libs dir")
        copy {
            from('../../build/flutter/intermediates/flutter/release')
                    .into('../../android/flutter_lib/libs')
        }
    }
}

/**
 * 没什么用，统一打包
 */
task buildFlutter {
    doLast {
        print("build flutter successful！")
    }
}

afterEvaluate {
    tasks.getByName("assembleRelease").dependsOn copyBuildFlutterFile
    copyBuildAarFile.dependsOn tasks.getByName("assembleRelease")
    buildFlutter.dependsOn copyBuildAarFile
}
// build/flutter/intermediates/flutter/debug/flutter_assets
// build/flutter_boost/outputs/aar/flutter_boots.debug.aar
// build/app/intermediates/merged_native_libs/debug/out/lib
